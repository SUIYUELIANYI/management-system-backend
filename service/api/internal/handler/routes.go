// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	application "management_system/service/api/internal/handler/application"
	exam "management_system/service/api/internal/handler/exam"
	file "management_system/service/api/internal/handler/file"
	rescue "management_system/service/api/internal/handler/rescue"
	role "management_system/service/api/internal/handler/role"
	user "management_system/service/api/internal/handler/user"
	"management_system/service/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/user/register",
				Handler: user.RegisterHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/login",
				Handler: user.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/wxMiniAuth",
				Handler: user.WXMiniAuthHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/importexcel",
				Handler: user.ImportExcelHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/phonenumber",
				Handler: user.GetPhoneNumberHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/accesstoken",
				Handler: user.GetAccessTokenHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/user/info",
				Handler: user.UserInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/uploadavatar",
				Handler: user.UploadAvatarHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/edit",
				Handler: user.EditUserInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/all",
				Handler: user.GetAllUserInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/id",
				Handler: user.GetUserInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/role",
				Handler: user.GetAllUserInfoByRoleHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/trainging",
				Handler: user.GetTrainingUserInfoByMobileHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/rescueduration",
				Handler: user.RescueDurationHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/rescuefrequency",
				Handler: user.RescueFrequencyHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/getresuceduration",
				Handler: user.GetUserRescueDurationHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/getrescuefrequency",
				Handler: user.GetUserRescueFrequencyHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/role/viewchangelist",
				Handler: role.RoleChangeListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/role/change",
				Handler: role.ChangeRoleHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/rescue/auth",
				Handler: rescue.AuthRescueHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/rescue/destroyrescuetoken",
				Handler: rescue.DestroyRescueTokenHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/rescue/release",
				Handler: rescue.ReleaseRescueInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/rescue/releasebyexcel",
				Handler: rescue.ReleaseResuceInfoByExcelHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuthForRescue.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/rescue/infos",
				Handler: rescue.GetAllRescueInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/rescue/unclaimed",
				Handler: rescue.GetUnclaimedRescueInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/rescue/claimed",
				Handler: rescue.GetClaimedRescueInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/rescue/address",
				Handler: rescue.GetRescueInfoByAddressHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/rescue/rescuetargetid",
				Handler: rescue.GetRescueInfoByRescueTargetIdHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/rescue/rescueteachername",
				Handler: rescue.GetRescueInfoByRescueTeacherNameHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/rescue/claim",
				Handler: rescue.ClaimRescueTargetHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/rescue/gettask",
				Handler: rescue.GetRescueTaskHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/rescue/targetinfo",
				Handler: rescue.GetRescueTargetInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/rescue/sign",
				Handler: rescue.SignHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/rescue/getsignature",
				Handler: rescue.GetSignatureHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/rescue/process",
				Handler: rescue.RescueProcessHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/rescue/getrescueprocess",
				Handler: rescue.GetRescueProcessHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/rescue/arearescuefrequency",
				Handler: rescue.AreaRescueFrequencyHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/rescue/yearrescuefrequency",
				Handler: rescue.YearRescueFrequencyHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/rescue/setthreshold",
				Handler: rescue.SetRescueDurationThresholdHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/application/form",
				Handler: application.GetOwnFormHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/application/edit",
				Handler: application.EditFormHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/application/forms",
				Handler: application.GetAllFormHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/application/address",
				Handler: application.GetFormByAddressHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/application/process",
				Handler: application.ProcessHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/application/processwithsubscribe",
				Handler: application.ProcessWithSubscribeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/application/status",
				Handler: application.GetFormByStatusHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/exam/entersubjective",
				Handler: exam.EnterSubjectiveHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/exam/enterobjective",
				Handler: exam.EnterObjectiveHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/exam/importsubjective",
				Handler: exam.ImportSubjectiveHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/exam/importobjective",
				Handler: exam.ImportObjectiveHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/exam/getgrades",
				Handler: exam.GetGradesHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/file/uploadvideo",
				Handler: file.UploadVideoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/file/uploadVideoUrl",
				Handler: file.UploadVideoUrlHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/file/addfolder",
				Handler: file.AddFolderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/file/getfolder",
				Handler: file.GetFolderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/file/getvideo",
				Handler: file.GetVideoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/file/editfolder",
				Handler: file.EditFolderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/file/editvideo",
				Handler: file.EditVideoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/file/submitviewingrecord",
				Handler: file.SubmitViewingRecordHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/file/getviewingrecord",
				Handler: file.GetViewingRecordHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/file/getqiniutoken",
				Handler: file.GetQiNiuTokenHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/file/deletefolder",
				Handler: file.DeleteFolderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/file/deletefile",
				Handler: file.DeleteFileHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)
}
