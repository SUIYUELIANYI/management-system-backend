// Code generated by goctl. DO NOT EDIT.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	applicationFormFieldNames          = builder.RawFieldNames(&ApplicationForm{})
	applicationFormRows                = strings.Join(applicationFormFieldNames, ",")
	applicationFormRowsExpectAutoSet   = strings.Join(stringx.Remove(applicationFormFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	applicationFormRowsWithPlaceHolder = strings.Join(stringx.Remove(applicationFormFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	applicationFormModel interface {
		Insert(ctx context.Context, data *ApplicationForm) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ApplicationForm, error)
		FindOneByUserId(ctx context.Context, userId int64) (*ApplicationForm, error)
		Update(ctx context.Context, data *ApplicationForm) error
		Delete(ctx context.Context, id int64) error
	}

	defaultApplicationFormModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ApplicationForm struct {
		Id                    int64     `db:"id"` // 申请表编号
		CreateTime            time.Time `db:"create_time"`
		UpdateTime            time.Time `db:"update_time"`
		DeleteTime            time.Time `db:"delete_time"`
		DelState              int64     `db:"del_state"`
		UserId                int64     `db:"user_id"`                 // 申请人id
		Mobile                string    `db:"mobile"`                  // 电话
		Username              string    `db:"username"`                // 用户名称
		Sex                   int64     `db:"sex"`                     // 性别 0-男 1-女
		Email                 string    `db:"email"`                   // 邮箱
		Address               string    `db:"address"`                 // 地址
		Birthday              string    `db:"birthday"`                // 生日 xxxx-xx-xx
		Status                int64     `db:"status"`                  // 申请表状态 0-待审批 1-区域负责人通过 2-组织管理委员会通过 3-未通过
		RegionalHeadId        int64     `db:"regional_head_id"`        // 区域负责人id
		OrganizingCommitteeId int64     `db:"organizing_committee_id"` // 组委会成员id
		SubmissionTime        int64     `db:"submission_time"`         // 提交次数
	}
)

func newApplicationFormModel(conn sqlx.SqlConn) *defaultApplicationFormModel {
	return &defaultApplicationFormModel{
		conn:  conn,
		table: "`application_form`",
	}
}

func (m *defaultApplicationFormModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultApplicationFormModel) FindOne(ctx context.Context, id int64) (*ApplicationForm, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", applicationFormRows, m.table)
	var resp ApplicationForm
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultApplicationFormModel) FindOneByUserId(ctx context.Context, userId int64) (*ApplicationForm, error) {
	var resp ApplicationForm
	query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", applicationFormRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, userId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultApplicationFormModel) Insert(ctx context.Context, data *ApplicationForm) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, applicationFormRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.UserId, data.Mobile, data.Username, data.Sex, data.Email, data.Address, data.Birthday, data.Status, data.RegionalHeadId, data.OrganizingCommitteeId, data.SubmissionTime)
	return ret, err
}

func (m *defaultApplicationFormModel) Update(ctx context.Context, newData *ApplicationForm) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, applicationFormRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.DeleteTime, newData.DelState, newData.UserId, newData.Mobile, newData.Username, newData.Sex, newData.Email, newData.Address, newData.Birthday, newData.Status, newData.RegionalHeadId, newData.OrganizingCommitteeId, newData.SubmissionTime, newData.Id)
	return err
}

func (m *defaultApplicationFormModel) tableName() string {
	return m.table
}
