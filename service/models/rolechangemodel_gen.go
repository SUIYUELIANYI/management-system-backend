// Code generated by goctl. DO NOT EDIT.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	roleChangeFieldNames          = builder.RawFieldNames(&RoleChange{})
	roleChangeRows                = strings.Join(roleChangeFieldNames, ",")
	roleChangeRowsExpectAutoSet   = strings.Join(stringx.Remove(roleChangeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	roleChangeRowsWithPlaceHolder = strings.Join(stringx.Remove(roleChangeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	roleChangeModel interface {
		Insert(ctx context.Context, data *RoleChange) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*RoleChange, error)
		Update(ctx context.Context, data *RoleChange) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRoleChangeModel struct {
		conn  sqlx.SqlConn
		table string
	}

	RoleChange struct {
		Id         int64     `db:"id"`
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
		DeleteTime time.Time `db:"delete_time"`
		DelState   int64     `db:"del_state"`
		UserId     int64     `db:"user_id"`     // 身份变动用户id
		OperatorId int64     `db:"operator_id"` // 操作人id
		NewRole    int64     `db:"new_role"`    // 新身份
		OldRole    int64     `db:"old_role"`    // 旧身份
	}
)

func newRoleChangeModel(conn sqlx.SqlConn) *defaultRoleChangeModel {
	return &defaultRoleChangeModel{
		conn:  conn,
		table: "`role_change`",
	}
}

func (m *defaultRoleChangeModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRoleChangeModel) FindOne(ctx context.Context, id int64) (*RoleChange, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", roleChangeRows, m.table)
	var resp RoleChange
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRoleChangeModel) Insert(ctx context.Context, data *RoleChange) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, roleChangeRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.UserId, data.OperatorId, data.NewRole, data.OldRole)
	return ret, err
}

func (m *defaultRoleChangeModel) Update(ctx context.Context, data *RoleChange) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, roleChangeRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.UserId, data.OperatorId, data.NewRole, data.OldRole, data.Id)
	return err
}

func (m *defaultRoleChangeModel) tableName() string {
	return m.table
}
