// Code generated by goctl. DO NOT EDIT.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	viewingRecordFieldNames          = builder.RawFieldNames(&ViewingRecord{})
	viewingRecordRows                = strings.Join(viewingRecordFieldNames, ",")
	viewingRecordRowsExpectAutoSet   = strings.Join(stringx.Remove(viewingRecordFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	viewingRecordRowsWithPlaceHolder = strings.Join(stringx.Remove(viewingRecordFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	viewingRecordModel interface {
		Insert(ctx context.Context, data *ViewingRecord) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ViewingRecord, error)
		FindOneByUserIdFileId(ctx context.Context, userId int64, fileId int64) (*ViewingRecord, error)
		Update(ctx context.Context, data *ViewingRecord) error
		Delete(ctx context.Context, id int64) error
	}

	defaultViewingRecordModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ViewingRecord struct {
		Id         int64     `db:"id"` // 观看记录编号
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
		DeleteTime time.Time `db:"delete_time"`
		DelState   int64     `db:"del_state"`
		UserId     int64     `db:"user_id"`
		FileId     int64     `db:"file_id"`
		Duration   int64     `db:"duration"` // 观看时长（单位s）
	}
)

func newViewingRecordModel(conn sqlx.SqlConn) *defaultViewingRecordModel {
	return &defaultViewingRecordModel{
		conn:  conn,
		table: "`viewing_record`",
	}
}

func (m *defaultViewingRecordModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultViewingRecordModel) FindOne(ctx context.Context, id int64) (*ViewingRecord, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", viewingRecordRows, m.table)
	var resp ViewingRecord
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultViewingRecordModel) FindOneByUserIdFileId(ctx context.Context, userId int64, fileId int64) (*ViewingRecord, error) {
	var resp ViewingRecord
	query := fmt.Sprintf("select %s from %s where `user_id` = ? and `file_id` = ? limit 1", viewingRecordRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, userId, fileId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultViewingRecordModel) Insert(ctx context.Context, data *ViewingRecord) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, viewingRecordRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.UserId, data.FileId, data.Duration)
	return ret, err
}

func (m *defaultViewingRecordModel) Update(ctx context.Context, newData *ViewingRecord) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, viewingRecordRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.DeleteTime, newData.DelState, newData.UserId, newData.FileId, newData.Duration, newData.Id)
	return err
}

func (m *defaultViewingRecordModel) tableName() string {
	return m.table
}
