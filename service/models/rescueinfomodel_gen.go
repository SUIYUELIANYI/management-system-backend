// Code generated by goctl. DO NOT EDIT.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	rescueInfoFieldNames          = builder.RawFieldNames(&RescueInfo{})
	rescueInfoRows                = strings.Join(rescueInfoFieldNames, ",")
	rescueInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(rescueInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	rescueInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(rescueInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	rescueInfoModel interface {
		Insert(ctx context.Context, data *RescueInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*RescueInfo, error)
		Update(ctx context.Context, data *RescueInfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRescueInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	RescueInfo struct {
		Id                int64          `db:"id"` // 救援信息编号
		CreateTime        time.Time      `db:"create_time"`
		UpdateTime        time.Time      `db:"update_time"`
		DeleteTime        time.Time      `db:"delete_time"`
		DelState          int64          `db:"del_state"`
		RescueTargetId    int64          `db:"rescue_target_id"`   // 救援对象编号
		ReleaseTime       string         `db:"release_time"`       // 发布时间
		WeiboAccount      string         `db:"weibo_account"`      // 微博账号
		WeiboAddress      string         `db:"weibo_address"`      // 微博地址
		Nickname          string         `db:"nickname"`           // 昵称
		RiskLevel         string         `db:"risk_level"`         // 危险级别
		Area              string         `db:"area"`               // 所在城市
		Sex               int64          `db:"sex"`                // 性别 0-男 1-女
		Birthday          string         `db:"birthday"`           // 生日
		BriefIntroduction string         `db:"brief_introduction"` // 简介
		Text              sql.NullString `db:"text"`               // 信息原文
	}
)

func newRescueInfoModel(conn sqlx.SqlConn) *defaultRescueInfoModel {
	return &defaultRescueInfoModel{
		conn:  conn,
		table: "`rescue_info`",
	}
}

func (m *defaultRescueInfoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRescueInfoModel) FindOne(ctx context.Context, id int64) (*RescueInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", rescueInfoRows, m.table)
	var resp RescueInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRescueInfoModel) Insert(ctx context.Context, data *RescueInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, rescueInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.RescueTargetId, data.ReleaseTime, data.WeiboAccount, data.WeiboAddress, data.Nickname, data.RiskLevel, data.Area, data.Sex, data.Birthday, data.BriefIntroduction, data.Text)
	return ret, err
}

func (m *defaultRescueInfoModel) Update(ctx context.Context, data *RescueInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, rescueInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.RescueTargetId, data.ReleaseTime, data.WeiboAccount, data.WeiboAddress, data.Nickname, data.RiskLevel, data.Area, data.Sex, data.Birthday, data.BriefIntroduction, data.Text, data.Id)
	return err
}

func (m *defaultRescueInfoModel) tableName() string {
	return m.table
}
