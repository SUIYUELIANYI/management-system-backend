// Code generated by goctl. DO NOT EDIT.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	rescueProcessFieldNames          = builder.RawFieldNames(&RescueProcess{})
	rescueProcessRows                = strings.Join(rescueProcessFieldNames, ",")
	rescueProcessRowsExpectAutoSet   = strings.Join(stringx.Remove(rescueProcessFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	rescueProcessRowsWithPlaceHolder = strings.Join(stringx.Remove(rescueProcessFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	rescueProcessModel interface {
		Insert(ctx context.Context, data *RescueProcess) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*RescueProcess, error)
		Update(ctx context.Context, data *RescueProcess) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRescueProcessModel struct {
		conn  sqlx.SqlConn
		table string
	}

	RescueProcess struct {
		Id              int64     `db:"id"` // 救援过程编号
		CreateTime      time.Time `db:"create_time"`
		UpdateTime      time.Time `db:"update_time"`
		DeleteTime      time.Time `db:"delete_time"`
		DelState        int64     `db:"del_state"`
		RescueTeacherId int64     `db:"rescue_teacher_id"` // 救援老师编号
		RescueInfoId    int64     `db:"rescue_info_id"`    // 救援信息编号
		StartTime       string    `db:"start_time"`        // 救援起始时间
		EndTime         string    `db:"end_time"`          // 救援结束时间
		Duration        string    `db:"duration"`          // 救援时长
		Evaluation      string    `db:"evaluation"`        // 救援评价
	}
)

func newRescueProcessModel(conn sqlx.SqlConn) *defaultRescueProcessModel {
	return &defaultRescueProcessModel{
		conn:  conn,
		table: "`rescue_process`",
	}
}

func (m *defaultRescueProcessModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRescueProcessModel) FindOne(ctx context.Context, id int64) (*RescueProcess, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", rescueProcessRows, m.table)
	var resp RescueProcess
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRescueProcessModel) Insert(ctx context.Context, data *RescueProcess) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, rescueProcessRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.RescueTeacherId, data.RescueInfoId, data.StartTime, data.EndTime, data.Duration, data.Evaluation)
	return ret, err
}

func (m *defaultRescueProcessModel) Update(ctx context.Context, data *RescueProcess) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, rescueProcessRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.RescueTeacherId, data.RescueInfoId, data.StartTime, data.EndTime, data.Duration, data.Evaluation, data.Id)
	return err
}

func (m *defaultRescueProcessModel) tableName() string {
	return m.table
}
