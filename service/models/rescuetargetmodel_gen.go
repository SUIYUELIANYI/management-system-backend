// Code generated by goctl. DO NOT EDIT.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	rescueTargetFieldNames          = builder.RawFieldNames(&RescueTarget{})
	rescueTargetRows                = strings.Join(rescueTargetFieldNames, ",")
	rescueTargetRowsExpectAutoSet   = strings.Join(stringx.Remove(rescueTargetFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	rescueTargetRowsWithPlaceHolder = strings.Join(stringx.Remove(rescueTargetFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	rescueTargetModel interface {
		Insert(ctx context.Context, data *RescueTarget) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*RescueTarget, error)
		Update(ctx context.Context, data *RescueTarget) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRescueTargetModel struct {
		conn  sqlx.SqlConn
		table string
	}

	RescueTarget struct {
		Id               int64     `db:"id"` // 救援对象编号
		CreateTime       time.Time `db:"create_time"`
		UpdateTime       time.Time `db:"update_time"`
		DeleteTime       time.Time `db:"delete_time"`
		DelState         int64     `db:"del_state"`
		WeiboAddress     string    `db:"weibo_address"`      // 微博地址
		Status           int64     `db:"status"`             // 救援状态 0-待救援 1-救援中 2-已救援
		StartTime        time.Time `db:"start_time"`         // 救援起始时间
		EndTime          time.Time `db:"end_time"`           // 救援结束时间
		RescueTeacher1Id int64     `db:"rescue_teacher1_id"` // 救助老师1id
		RescueTeacher2Id int64     `db:"rescue_teacher2_id"` // 救助老师2id
		RescueTeacher3Id int64     `db:"rescue_teacher3_id"` // 救助老师3id
		Description      string    `db:"description"`        // 救援过程描述
		Evaluation       string    `db:"evaluation"`         // 最终评价
	}
)

func newRescueTargetModel(conn sqlx.SqlConn) *defaultRescueTargetModel {
	return &defaultRescueTargetModel{
		conn:  conn,
		table: "`rescue_target`",
	}
}

func (m *defaultRescueTargetModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRescueTargetModel) FindOne(ctx context.Context, id int64) (*RescueTarget, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", rescueTargetRows, m.table)
	var resp RescueTarget
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRescueTargetModel) Insert(ctx context.Context, data *RescueTarget) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, rescueTargetRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.WeiboAddress, data.Status, data.StartTime, data.EndTime, data.RescueTeacher1Id, data.RescueTeacher2Id, data.RescueTeacher3Id, data.Description, data.Evaluation)
	return ret, err
}

func (m *defaultRescueTargetModel) Update(ctx context.Context, data *RescueTarget) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, rescueTargetRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.WeiboAddress, data.Status, data.StartTime, data.EndTime, data.RescueTeacher1Id, data.RescueTeacher2Id, data.RescueTeacher3Id, data.Description, data.Evaluation, data.Id)
	return err
}

func (m *defaultRescueTargetModel) tableName() string {
	return m.table
}
